% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/uncertainty_IRM.R
\name{uncertainty_IRM}
\alias{uncertainty_IRM}
\title{Uncertainty wrapper for the core_IRM}
\usage{
uncertainty_IRM(
  uncertianty_scalers,
  config_matrix,
  rf_list,
  irf_list,
  match_agents = FALSE,
  write_out = NULL,
  n_core = 1
)
}
\arguments{
\item{uncertianty_scalers}{a list of vectors containing uncertainty scalers for a specifc RF time series or IRF. The core_IRM will be run with all possible combinations of the uncertainty scalers.}

\item{config_matrix}{a matrix containing boolean indicators that refers to a specific RF time series and IRF to use as inputs in the contributing_temp function}

\item{rf_list}{a list of the RF time series}

\item{irf_list}{a list of the IRF}

\item{match_agents}{a logial value indicating whether the rf agent must match the irf, default set to FALSE}

\item{write_out}{default set to NULL will return a list of the uncertainty IRM results, but if set to a working direcotry will save the individual IRM resutls at the specified lcoation.}

\item{n_core}{default set to 1, defined the number of cores to parallelize the runs over.}
}
\value{
a depends on how the argument write_out is defined. If write_out = NULL then the function will return a nested list of IRM results for each uncertainty run but if write_out = 'A/DIRECTORY' then the function will return a list of file names where the results have been saved for each run.
}
\description{
\code{uncertainty_IRM} run the core_IRM mulitple times with RF time series and/or IRFs that have been modified
by some uncertainty scaler. Depending on the configuraiton of the uncertainty runs the total number of times that
HIRM will run increases expoentially, this will cause the run time to increase and the results may be too large
to store as a single object, may exceede R's memory limit. The arguement write_out can be used to store the
HIRM uncertainty results individually for each uncertainty run. This function as options to do the uncertainty runs in parallel.
}
